#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParseSCCMLogs
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SCCMLogs")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHostname(Hostname instance);
    partial void UpdateHostname(Hostname instance);
    partial void DeleteHostname(Hostname instance);
    partial void InsertLogText(LogText instance);
    partial void UpdateLogText(LogText instance);
    partial void DeleteLogText(LogText instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ParseSCCMLogs.Properties.Settings.Default.SCCMLogsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hostname> Hostnames
		{
			get
			{
				return this.GetTable<Hostname>();
			}
		}
		
		public System.Data.Linq.Table<LogText> LogTexts
		{
			get
			{
				return this.GetTable<LogText>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hostname")]
	public partial class Hostname : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HostnameID;
		
		private string _Hostname1;
		
		private System.Nullable<System.DateTime> _LastDateEntered;
		
		private EntitySet<LogText> _LogTexts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHostnameIDChanging(int value);
    partial void OnHostnameIDChanged();
    partial void OnHostname1Changing(string value);
    partial void OnHostname1Changed();
    partial void OnLastDateEnteredChanging(System.Nullable<System.DateTime> value);
    partial void OnLastDateEnteredChanged();
    #endregion
		
		public Hostname()
		{
			this._LogTexts = new EntitySet<LogText>(new Action<LogText>(this.attach_LogTexts), new Action<LogText>(this.detach_LogTexts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostnameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HostnameID
		{
			get
			{
				return this._HostnameID;
			}
			set
			{
				if ((this._HostnameID != value))
				{
					this.OnHostnameIDChanging(value);
					this.SendPropertyChanging();
					this._HostnameID = value;
					this.SendPropertyChanged("HostnameID");
					this.OnHostnameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Hostname", Storage="_Hostname1", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Hostname1
		{
			get
			{
				return this._Hostname1;
			}
			set
			{
				if ((this._Hostname1 != value))
				{
					this.OnHostname1Changing(value);
					this.SendPropertyChanging();
					this._Hostname1 = value;
					this.SendPropertyChanged("Hostname1");
					this.OnHostname1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastDateEntered", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastDateEntered
		{
			get
			{
				return this._LastDateEntered;
			}
			set
			{
				if ((this._LastDateEntered != value))
				{
					this.OnLastDateEnteredChanging(value);
					this.SendPropertyChanging();
					this._LastDateEntered = value;
					this.SendPropertyChanged("LastDateEntered");
					this.OnLastDateEnteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hostname_LogText", Storage="_LogTexts", ThisKey="HostnameID", OtherKey="HostnameID")]
		public EntitySet<LogText> LogTexts
		{
			get
			{
				return this._LogTexts;
			}
			set
			{
				this._LogTexts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogTexts(LogText entity)
		{
			this.SendPropertyChanging();
			entity.Hostname = this;
		}
		
		private void detach_LogTexts(LogText entity)
		{
			this.SendPropertyChanging();
			entity.Hostname = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogText")]
	public partial class LogText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _HostnameID;
		
		private string _Component;
		
		private System.DateTime _dateTime;
		
		private int _Thread;
		
		private string _Text;
		
		private string _Filename;
		
		private short _Type;
		
		private EntityRef<Hostname> _Hostname;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnHostnameIDChanging(int value);
    partial void OnHostnameIDChanged();
    partial void OnComponentChanging(string value);
    partial void OnComponentChanged();
    partial void OndateTimeChanging(System.DateTime value);
    partial void OndateTimeChanged();
    partial void OnThreadChanging(int value);
    partial void OnThreadChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    #endregion
		
		public LogText()
		{
			this._Hostname = default(EntityRef<Hostname>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostnameID", DbType="Int NOT NULL")]
		public int HostnameID
		{
			get
			{
				return this._HostnameID;
			}
			set
			{
				if ((this._HostnameID != value))
				{
					if (this._Hostname.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHostnameIDChanging(value);
					this.SendPropertyChanging();
					this._HostnameID = value;
					this.SendPropertyChanged("HostnameID");
					this.OnHostnameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Component", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Component
		{
			get
			{
				return this._Component;
			}
			set
			{
				if ((this._Component != value))
				{
					this.OnComponentChanging(value);
					this.SendPropertyChanging();
					this._Component = value;
					this.SendPropertyChanged("Component");
					this.OnComponentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime dateTime
		{
			get
			{
				return this._dateTime;
			}
			set
			{
				if ((this._dateTime != value))
				{
					this.OndateTimeChanging(value);
					this.SendPropertyChanging();
					this._dateTime = value;
					this.SendPropertyChanged("dateTime");
					this.OndateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thread", DbType="Int NOT NULL")]
		public int Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				if ((this._Thread != value))
				{
					this.OnThreadChanging(value);
					this.SendPropertyChanging();
					this._Thread = value;
					this.SendPropertyChanged("Thread");
					this.OnThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hostname_LogText", Storage="_Hostname", ThisKey="HostnameID", OtherKey="HostnameID", IsForeignKey=true)]
		public Hostname Hostname
		{
			get
			{
				return this._Hostname.Entity;
			}
			set
			{
				Hostname previousValue = this._Hostname.Entity;
				if (((previousValue != value) 
							|| (this._Hostname.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hostname.Entity = null;
						previousValue.LogTexts.Remove(this);
					}
					this._Hostname.Entity = value;
					if ((value != null))
					{
						value.LogTexts.Add(this);
						this._HostnameID = value.HostnameID;
					}
					else
					{
						this._HostnameID = default(int);
					}
					this.SendPropertyChanged("Hostname");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
